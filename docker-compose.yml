services:
  postgresdb:
    container_name: postgresdb
    image: postgres:16.1
    restart: always
    ports:
      - ${POSTGRES_PORT}
    volumes:
      - ${POSGRESDB_VOLUME_PATH}/.postgresdb-data:/var/lib/postgresql/data
      - ./init-postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - backend-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s

  postgres-gui:
    image: dpage/pgadmin4:8.2
    container_name: postgres-gui
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    ports:
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backend-network

  redis:
    container_name: redis
    image: redis:7.2.4
    restart: always
    ports:
      - ${REDIS_PORT}
    networks:
      - backend-network
    volumes:
      - redis_data_container:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s

  web:
    stdin_open: true
    tty: true
    container_name: web
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - ./src/:/opt/app/src
      - ./prisma:/opt/app/prisma
    depends_on:
      postgresdb:
        condition: service_healthy 
    ports:
      - '${API_PORT}:${API_PORT}'
      - '${PRISMA_STUDIO_PORT}:${PRISMA_STUDIO_PORT}'
    env_file:
      - .env
    environment:
      PORT: ${API_PORT}
    healthcheck:
      test: curl --fail web:${API_PORT}/health || exit 1
      interval: 5s
      retries: 10
      start_period: 30s
      timeout: 10s
    networks:
      - backend-network

networks:
  backend-network:
    name: backend-network
    driver: bridge
    external: true

volumes:
  pgadmin_data:
  redis_data_container: